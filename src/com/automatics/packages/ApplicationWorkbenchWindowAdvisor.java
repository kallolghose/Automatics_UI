package com.automatics.packages;

import java.io.FileOutputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.application.ActionBarAdvisor;
import org.eclipse.ui.application.IActionBarConfigurer;
import org.eclipse.ui.application.IWorkbenchWindowConfigurer;
import org.eclipse.ui.application.WorkbenchWindowAdvisor;

import com.automatics.mongo.api.ObjectMapAPI;
import com.automatics.mongo.api.OperationsAPI;
import com.automatics.mongo.api.TestSuiteAPI;
import com.automatics.mongo.api.TestcaseAPI;
import com.automatics.utilities.git.GitUtilities;
import com.automatics.utilities.helpers.Installables;
import com.automatics.utilities.helpers.Utilities;

public class ApplicationWorkbenchWindowAdvisor extends WorkbenchWindowAdvisor {

	public ApplicationWorkbenchWindowAdvisor(IWorkbenchWindowConfigurer configurer) {
		super(configurer);
	}

	public ActionBarAdvisor createActionBarAdvisor(
			IActionBarConfigurer configurer) {
		return new ApplicationActionBarAdvisor(configurer);
	}

	public void preWindowOpen() 
	{
		try
		{
			/*
			 * Create logs location*/
			Installables.createLogFileAtLocation();
			
			/*
			 * Initialize GIT functionalities
			 * */
			GitUtilities gitUtil = new GitUtilities();
			//GitUtilities.GIT_PROPERTY_PATH = "D:/KG00360770/ATT/Automatic_DC/Automatics/conf.ini"; //For Desktop use this
			GitUtilities.GIT_PROPERTY_PATH = System.getProperty("user.dir")+ "/../conf.ini"; //For Exe Use this
			Properties prop = gitUtil.loadAndSetProperties(GitUtilities.GIT_PROPERTY_PATH);
			prop.setProperty("LOCAL_PATH", ResourcesPlugin.getWorkspace().getRoot().getLocation().toString() + "/" + Utilities.PROJECT_NAME 
										   + "/com.automatics.packages");
			prop.store(new FileOutputStream(GitUtilities.GIT_PROPERTY_PATH), null);

			/*Set various variables to be used later in the code*/
			/*
			 * 1. Operations API
			 * 2. TestCase API
			 * 3. TestSuite API
			 * 4. ObjectMap API
			 * */
			Utilities.MONGO_DB_URL = prop.getProperty("MONGO_DB_URL");
			Utilities.DB_PROJECT_NAME = prop.getProperty("PROJECT_NAME");
			Utilities.API_URL = prop.getProperty("API_URL");
			OperationsAPI.setAPIFields(Utilities.API_URL + "/operations/" + Utilities.DB_PROJECT_NAME , 
									   Utilities.AUTOMATICS_USERNAME, Utilities.AUTOMATICS_PASSWORD);
			TestcaseAPI.setAPIFields(Utilities.API_URL + "/testcases/" + Utilities.DB_PROJECT_NAME ,
									 Utilities.AUTOMATICS_USERNAME, Utilities.AUTOMATICS_PASSWORD);
			TestSuiteAPI.setAPIFields(Utilities.API_URL + "/testsuites/" + Utilities.DB_PROJECT_NAME ,
									 Utilities.AUTOMATICS_USERNAME, Utilities.AUTOMATICS_PASSWORD);
			ObjectMapAPI.setAPIFields(Utilities.API_URL + "/objects/" + Utilities.DB_PROJECT_NAME ,
									 Utilities.AUTOMATICS_USERNAME, Utilities.AUTOMATICS_PASSWORD);
			
			
			/*
			 * Perform Cloning of Automatics Workspace from GIT
			 * */
			gitUtil.setGitProperties(prop);
			if(gitUtil.cloneRepository())
			{
				System.out.println("[" + new Date() + "] - Cloning Performed.");
			}
			else
			{
				System.out.println("[" + new Date() + "] - Error While Cloning");
			}
			
			/*
			 * Windows Configure Object Calls - Generated By Eclipse
			 * */
			IWorkbenchWindowConfigurer configurer = getWindowConfigurer();
			configurer.setInitialSize(new Point(400, 300));
			configurer.setShowPerspectiveBar(true);
			configurer.setShowCoolBar(true);
			configurer.setShowStatusLine(false);
			configurer.setTitle("Automatics v0.1");
			
		}
		catch(Exception e)
		{
			System.out.println("[" + new Date() + "] - preWindowOpen()" + e.getMessage());
			e.printStackTrace(System.out);
		}
	}
}
